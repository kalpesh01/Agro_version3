<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Introducing the Red Hat build of Eclipse Vert.x 4.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PcEgqD9cg-M/" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="distributed tracing" /><category term="Jkube" /><category term="openshift" /><category term="reactive programming" /><category term="vert.x" /><author><name>Syed M Shaaf</name></author><id>https://developers.redhat.com/blog/?p=855807</id><updated>2021-01-21T08:00:28Z</updated><published>2021-01-21T08:00:28Z</published><content type="html">&lt;p&gt;If you are interested in reactive, non-blocking, and asynchronous Java development, you are likely familiar with &lt;a target="_blank" rel="nofollow" href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt;. The project started in 2011 and successfully moved to the Eclipse Foundation in 2013. Since then, Vert.x has undergone nine years of rigorous development and grown into a thriving community. It is one of the most widely used reactive frameworks, with support for multiple extensions, including extensions for messaging or streaming with &lt;a href="https://developers.redhat.com/topics/kafka-kubernetes"&gt;Kafka&lt;/a&gt; or Artemis, developing applications with gRPC and GraphQL, and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/3348731"&gt;so much more&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_eclipse_vert.x/4.0/html/release_notes_for_eclipse_vert.x_4.0/index"&gt;Red Hat build of Eclipse Vert.x 4.0&lt;/a&gt; is now generally available. This release improves Vert.x&amp;#8217;s core APIs and handling. Developers who migrate can expect enhancements to futures and promises, distributed tracing, and deployment on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. In this article, I introduce these updates and offer tips for migrating and deploying your Eclipse Vert.x 4.0 applications on OpenShift.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Please see the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_eclipse_vert.x/4.0/html/eclipse_vert.x_4.0_migration_guide/"&gt;Red Hat build of Eclipse Vert.x 4.0 migration guide&lt;/a&gt; for a detailed introduction to migrating from Vert.x 3.x to Vert.x 4.0.&lt;/p&gt; &lt;h2&gt;The &amp;#60;Future&amp;#62; is here!&lt;/h2&gt; &lt;p&gt;&lt;code&gt;Future&lt;/code&gt; is an &lt;code&gt;AsyncResult&amp;#60;T&amp;#62;&lt;/code&gt; that you can use to create asynchronous operations in Vert.x 4.0. Every asynchronous method returns a &lt;code&gt;Future&lt;/code&gt; object, &lt;code&gt;success&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;, as the result of a call:&lt;/p&gt; &lt;pre&gt;FileSystem fs = vertx.fileSystem(); Future&amp;#60;FileProps&amp;#62; future = fs.props("/my_file.txt"); future.onComplete((AsyncResult&amp;#60;FileProps&amp;#62; ar) -&amp;#62; { if (ar.succeeded()) { FileProps props = ar.result(); System.out.println("File size = " + props.size()); } else { System.out.println("Failure: " + ar.cause().getMessage()); } }); &lt;/pre&gt; &lt;p&gt;If you prefer to use callbacks and get a &lt;code&gt;Handler&lt;/code&gt; back, Vert.x 4.0 still implements &lt;code&gt;props&lt;/code&gt;, as shown here:&lt;/p&gt; &lt;pre&gt;&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/file/FileSystem.html"&gt;FileSystem&lt;/a&gt; props(&lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html?is-external=true"&gt;String&lt;/a&gt; path,&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Handler.html"&gt;Handler&lt;/a&gt;&amp;#60;&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/AsyncResult.html"&gt;AsyncResult&lt;/a&gt;&amp;#60;&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/file/FileProps.html"&gt;FileProps&lt;/a&gt;&amp;#62;&amp;#62; handler) &lt;/pre&gt; &lt;p&gt;Developers migrating from Vert.x 3.x to Vert.x 4.0 can also use &lt;code&gt;Future&lt;/code&gt; with callbacks:&lt;/p&gt; &lt;pre&gt;WebClient client = WebClient.create(vertx); HttpRequest request = client.get("/resource"); Future&amp;#60;HttpResponse&amp;#62; response = request.send(); response.onComplete(ar -&amp;#62; { if (ar.succeeded()) { HttpResponse response = ar.result(); } else { Throwable failure = ar.cause(); } }); &lt;/pre&gt; &lt;p&gt;Error handling is more straightforward with futures than with callbacks. You don&amp;#8217;t need to track yourself back into each callback, and you can handle a failure just once, at the end of a composition. Futures also let you compose asynchronous events in parallel or sequentially. All in all, this feature greatly simplifies application programming with Vert.x.&lt;/p&gt; &lt;h2&gt;Promises&lt;/h2&gt; &lt;p&gt;A &lt;i&gt;promise&lt;/i&gt; represents the writable side of an action that may or may not have yet occurred. Each promise has a &lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Promise.html#future--"&gt;future()&lt;/a&gt; method, which returns a &lt;code&gt;Future&lt;/code&gt; for the given promise. You can use promises and futures together to get a notification of completion. The following example shows &lt;code&gt;HttpServerVerticle&lt;/code&gt; using a promise.&lt;/p&gt; &lt;pre&gt;package com.example.starter; import io.vertx.core.AbstractVerticle; import io.vertx.core.Promise; public class MainVerticle extends AbstractVerticle { @Override public void start(Promise&amp;#60;Void&amp;#62; startPromise) throws Exception { vertx.createHttpServer().requestHandler(req -&amp;#62; { req.response() .putHeader("content-type", "text/plain") .end("Hello from Vert.x!"); }).listen(8888, http -&amp;#62; { if (http.succeeded()) { startPromise.complete(); System.out.println("HTTP server started on port 8888"); } else { startPromise.fail(http.cause()); } }); } } &lt;/pre&gt; &lt;p&gt;In this case, the method returns the &lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Future.html"&gt;Future&lt;/a&gt; associated with a promise. We use the &lt;code&gt;Future&lt;/code&gt; to send a notification when the promise has been completed and retrieve its value. Furthermore, a promise extends &lt;code&gt;Handler&amp;#60;AsyncResult&amp;#60;T&amp;#62;&amp;#62; &lt;/code&gt;so thatÂ we can use it as a callback.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Before migrating your applications to Eclipse Vert.x 4.0, check for deprecations and removals. The compiler will generate a warning when you use a deprecated API.&lt;/p&gt; &lt;h2&gt;Distributed tracing&lt;/h2&gt; &lt;p&gt;Many components in a modern, distributed software application have their own operations lifecycle. The challenge is to trace various events and correlate that information across components. Tracing lets us understand the state of the system and how well the system adheres to key performance indicator metrics (KPIs). To find out how many people are getting help in a disaster-rescue effort, for example, we must correlate and trace data in a distributed software system. We can use that information to evaluate whether the software is meeting our business requirements.&lt;/p&gt; &lt;p&gt;Distributed tracing lets us visualize and understand the chain of events and flows in an interaction between software applications. For distributed tracing in microservices environments, we can use Vert.x 4.0 with &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/microservices/what-is-jaeger"&gt;Jaeger&lt;/a&gt;, an &lt;a target="_blank" rel="nofollow" href="https://opentracing.io"&gt;OpenTracing&lt;/a&gt; client that is part of the Cloud Native Computing Foundation.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the Red Hat OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/jaeger/jaeger_install/rhbjaeger-deploying.html"&gt;guide to configuring and deploying Jaeger&lt;/a&gt; for instructions to install Jaeger.&lt;/p&gt; &lt;p&gt;Once we have Jaeger installed, we can use the following Vert.x components to log traces:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;HTTP server and HTTP client&lt;/li&gt; &lt;li&gt;Eclipse Vert.x SQL client&lt;/li&gt; &lt;li&gt;Eclipse Vert.x Kafka client&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Each of these components implements the following &lt;code&gt;TracingPolicy&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/tracing/TracingPolicy.html#PROPAGATE"&gt;PROPAGATE&lt;/a&gt;: The component reports a span in the active trace.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/tracing/TracingPolicy.html#ALWAYS"&gt;ALWAYS&lt;/a&gt;: The component reports a span in the active trace or creates a new active trace.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/tracing/TracingPolicy.html#IGNORE"&gt;IGNORE&lt;/a&gt;: Ignores tracing for the component in question.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here&amp;#8217;s an example of a simple tracing policy implementation:&lt;/p&gt; &lt;pre&gt;HttpServer server = vertx.createHttpServer(new HttpServerOptions() .setTracingPolicy(TracingPolicy.IGNORE) ); &lt;/pre&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://github.com/vert-x3/vertx-examples/tree/4.x/opentracing-examples"&gt;Vert.x Opentracing examples&lt;/a&gt; repository for a more detailed tracing example with Vert.x and Jaeger.&lt;/p&gt; &lt;h2&gt;Metering labels for OpenShift&lt;/h2&gt; &lt;p&gt;You can now add metering labels to your Eclipse Vert.x applications running on OpenShift. Customers use the labels to track deployments they have subscribed to follow. Eclipse Vert.x uses the following metering labels:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;com.redhat.component-name: Vert.x&lt;/li&gt; &lt;li&gt;com.redhat.component-type: application&lt;/li&gt; &lt;li&gt;com.redhat.component-version: 4.0.0&lt;/li&gt; &lt;li&gt;com.redhat.product-name: &amp;#8220;Red_Hat_Runtimes&amp;#8221;&lt;/li&gt; &lt;li&gt;com.redhat.product-version: 2021/Q1&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See the OpenShift 4.6 documentation for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.6/html/metering/index"&gt;more about metering labels&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Deploying Eclipse Vert.x applications to OpenShift&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube"&gt;Eclipse JKube&lt;/a&gt; is a collection of plug-ins and libraries for building container images using Docker, Jib, or source-to-image (S2I) build strategies. Unlike its predecessor, Fabric8, Eclipse JKube eases Java development on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and OpenShift. Developers can focus on creating applications without getting into details, such as creating manifests.&lt;/p&gt; &lt;p&gt;Eclipse JKube includes manifests as part of the Maven build, then generates and deploys them at compile time. The JKube plug-in generates resource manifests for you automatically, which you can apply afterward. Here&amp;#8217;s an example of how to run an application on OpenShift with Eclipse JKube:&lt;/p&gt; &lt;pre&gt;# The following commmands will create your OpenShift resource descriptors. mvn clean oc:resource -Popenshift # Starting the S2I build mvn package oc:build -Popenshift Â  # Deploying to OpenShift mvn oc:deploy -Popenshift &lt;/pre&gt; &lt;p&gt;See this &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/jkube/tree/master/quickstarts/maven/vertx/"&gt;sample project using Eclipse JKube plug-ins&lt;/a&gt; for more details.&lt;/p&gt; &lt;h2&gt;Packaging and deployment&lt;/h2&gt; &lt;p&gt;You can now package and deploy your applications to OpenShift with Open Container Initiative (OCI)-compliant &lt;a href="https://developers.redhat.com/articles/ubi-faq"&gt;Universal Base Images&lt;/a&gt; for &lt;a href="https://developers.redhat.com/products/openjdk/overview"&gt;Red Hat OpenJDK 8 and 11&lt;/a&gt; on &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux 8&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Additionally, the Vert.x &lt;code&gt;vertx-web-client.js&lt;/code&gt; is now published in the NPM repository and no longer available as a Maven artifact. You can access the client from &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/@vertx/eventbus-bridge-client.js"&gt;@vertx/eventbus-bridge-client.js&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;New to reactive programming?&lt;/h2&gt; &lt;p&gt;If you are new to reactive programming, you can use &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-vertx/"&gt;self-paced scenarios&lt;/a&gt; to learn and experiment with Vert.x or learn about other technologies within Red Hat Runtimes. Each scenario provides a preconfigured Red Hat OpenShift instance that is accessible from your browser without any downloads or configuration.&lt;/p&gt; &lt;p&gt;For developers who prefer to dive deep, I recommend reading &lt;a target="_blank" rel="nofollow" href="https://www.manning.com/books/vertx-in-action"&gt;&lt;em&gt;Vert.x in Action&lt;/em&gt;&lt;/a&gt; by &lt;a href="https://developers.redhat.com/blog/author/jponge/"&gt;Julien Ponge&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Get the Red Hat build of Vert.x 4.0&lt;/h2&gt; &lt;p&gt;Support for Eclipse Vert.x is available to Red Hat customers through a &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt; subscription. Red Hat&amp;#8217;s runtime support is scheduling according to the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/jboss_notes/"&gt;Red Hat product update and support lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are new to Eclipse Vert.x and would like to learn more, go to our live learning portal for a guided &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-vertx/"&gt;tutorial&lt;/a&gt;, or see the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_eclipse_vert.x/4.0/"&gt;product documentation&lt;/a&gt; for technical details. You can also check the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/3985941"&gt;supported configurations&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/3348731"&gt;component details&lt;/a&gt; for Eclipse Vert.x on Red Hat Runtimes, and see the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_eclipse_vert.x/4.0/html/eclipse_vert.x_4.0_migration_guide/"&gt;migration guide&lt;/a&gt; for a detailed introduction to migrating from Eclipse Vert.x 3.x to Vert.x 4.0.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F21%2Fintroducing-the-red-hat-build-of-eclipse-vert-x-4-0%2F&amp;#038;title=Introducing%20the%20Red%20Hat%20build%20of%20Eclipse%20Vert.x%204.0" data-a2a-url="https://developers.redhat.com/blog/2021/01/21/introducing-the-red-hat-build-of-eclipse-vert-x-4-0/" data-a2a-title="Introducing the Red Hat build of Eclipse Vert.x 4.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/21/introducing-the-red-hat-build-of-eclipse-vert-x-4-0/"&gt;Introducing the Red Hat build of Eclipse Vert.x 4.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PcEgqD9cg-M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;If you are interested in reactive, non-blocking, and asynchronous Java development, you are likely familiar with Eclipse Vert.x. The project started in 2011 and successfully moved to the Eclipse Foundation in 2013. Since then, Vert.x has undergone nine years of rigorous development and grown into a thriving community. It is one of the most widely [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/21/introducing-the-red-hat-build-of-eclipse-vert-x-4-0/"&gt;Introducing the Red Hat build of Eclipse Vert.x 4.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/21/introducing-the-red-hat-build-of-eclipse-vert-x-4-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">855807</post-id><dc:creator>Syed M Shaaf</dc:creator><dc:date>2021-01-21T08:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/21/introducing-the-red-hat-build-of-eclipse-vert-x-4-0/</feedburner:origLink></entry><entry><title type="html">Apache Camel 3.8 and Java Flight Recorder</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gS5qIFb9BGc/apache-camel-38-and-java-flight-recorder.html" /><author><name>Claus Ibsen</name></author><id>http://feedproxy.google.com/~r/ApacheCamel/~3/MAojxhqbNc0/apache-camel-38-and-java-flight-recorder.html</id><updated>2021-01-20T11:35:00Z</updated><content type="html">In the upcoming 3.8 release we have a new Camel component to integrate with Java Flight Recorder. Camel is now capable of capturing "work steps" during startup that can be recorded with Java Flight Recorder. This can be used to better diagnose and find where your Camel applications may be slow to startup, for example due to a misbehaving component or custom user code. The screenshot below shows a recording that has captured a Camel application that takes about 3 seconds to startup. Its a very tiny application so we expected it to be faster.Â  If we sort the events by duration in the JDK mission control, we can see that there are 4 events that take over 2 seconds. The sequence is a sequence of the following step (sub step): Initializing context -&gt; Initializing routes -&gt; Creating route (route2) -&gt; Creating Bean processor (bean1) What we can see is that the step with the highest depth is "Creating Bean processor" which takes about 2 seconds. This is the culprit of the bottleneck. If we check the Camel route for where bean1 is in use, its in route2 at: Â  Â  Â  Â  from("direct:slow") Â  Â  Â  Â  Â  Â  .to("log:slow?level=OFF") Â  Â  Â  Â  Â  Â  .bean(MyBean.class, "hello"); Here we can see the bean is using MyBean class, which we can then look at next: Â  Â  public MyBean() { Â  Â  Â  Â  // force slow startup Â  Â  Â  Â  try { Â  Â  Â  Â  Â  Â  LOG.warn("Forcing 2 sec delay to have slow startup"); Â  Â  Â  Â  Â  Â  Thread.sleep(2000); Â  Â  Â  Â  } catch (Exception e) { Â  Â  Â  Â  Â  Â  // ignore Â  Â  Â  Â  } Â  Â  } Ah okay here is the problem. The bean is sleeping for 2 seconds. Yes of course this is a made up example, but it does affect the recording and allow us to find it via the JDK mission control tool. We also offer a logging recorder where you can "see" some of the same information as in JDK mission control. However when using JDK mission control, you have the entire JFR recording that also captures alot of JVM information about CPU and memory use and whatnot. To use Java Flight Recorder with Camel, all you have to do is to add camel-jfr on the classpath. Then Camel will auto-detect this and enable it. You can configure the recorder with various options which will be documented as part of the . But for quickly finding startup bottlenecks for Camel applications then the logging recorder is a good start. The screenshot below shows the logging output, and as you can see from the red square we have identified where the "2 second" problem is. The logging recorder comes out of the box in camel-core, and you can just use it by configuring: camel.main.startup-recorder = logging If you are using Camel Main, Camel Quarkus etc. And for Spring Boot, you can enable it with camel.springboot.startup-recorder = logging You can also set a custom recorder, or one of the out of the box implementation via Java code: camelContext.adapt(ExtendedCamelContext.class) Â  .setStartupStepRecorder(...); You can try this example () from the Camel Examples git repository. From command line you can runÂ  mvn camel:run And Camel will automatic capture a JFR recording and save to disk. The output of the file is shown in the log, which you can then open from JDK mission control.Â Â &lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gS5qIFb9BGc" height="1" width="1" alt=""/&gt;</content><dc:creator>Claus Ibsen</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/MAojxhqbNc0/apache-camel-38-and-java-flight-recorder.html</feedburner:origLink></entry><entry><title type="html">Quarkus 1.11 released - RESTEasy Reactive, Dev UI, and more!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Cd7IOlusvD8/" /><author><name /></author><id>https://quarkus.io/blog/quarkus-1-11-0-final-released/</id><updated>2021-01-20T00:00:00Z</updated><content type="html">For each Quarkus release, itâs the same story: it comes with a ton of exciting new features and enhancementsâ¦ But believe it or not, itâs true. 1.11 is an important milestone as it marks the beginning of two amazing new features: RESTEasy Reactive, Our Dev UI. But it also comes...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Cd7IOlusvD8" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/quarkus-1-11-0-final-released/</feedburner:origLink></entry><entry><title>Use vim in a production Red Hat OpenShift container in 6 easy steps</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/USaqb-inbjk/" /><category term="Containers" /><category term="Kubernetes" /><category term="Linux" /><category term="Operating System" /><category term="Docker" /><category term="Fedora" /><category term="openshift" /><category term="Podman" /><category term="vim" /><author><name>Konrad Kleine</name></author><id>https://developers.redhat.com/blog/?p=806727</id><updated>2021-01-19T08:00:48Z</updated><published>2021-01-19T08:00:48Z</published><content type="html">&lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: In most cases, we don&amp;#8217;t recommend editing files in a container. However, in rare cases, you might need to reproduce and slightly modify a file in a production container, especially when debugging. (In this case, the &lt;a target="_blank" rel="nofollow" href="https://fedoraproject.org/wiki/Vim"&gt;vim&lt;/a&gt; method I&amp;#8217;m using works on Fedora 32 on my laptop and it is the base of my &lt;a target="_blank" rel="nofollow" href="http://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;Â container image.)&lt;/p&gt; &lt;p&gt;In this article, I present a quick demo on how to install and run vim in a production Red Hat OpenShift container, when vim was not installed in the &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt; image. I also describe the method to use to overcome an event where the local operating system and container base image diverge.&lt;/p&gt; &lt;h3&gt;Step 1: Copy the vim binary&lt;/h3&gt; &lt;p&gt;For &lt;code&gt;oc cp&lt;/code&gt; to work, copy the vim binary:Â &lt;code&gt;&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;$ cp /usr/bin/vim ~/Downloads/vim&lt;/pre&gt; &lt;p&gt;(This way of copying the vim binary works best for me, although there might be another cleaner way. Let me know in the comments if you have a different way of doing it.)&lt;/p&gt; &lt;h3&gt;Step 2: Log in to the &lt;code&gt;oc&lt;/code&gt; cluster&lt;/h3&gt; &lt;p&gt;To login to the &lt;code&gt;oc&lt;/code&gt; cluster, run the command:&lt;/p&gt; &lt;pre&gt;$ oc login ..&lt;/pre&gt; &lt;h3&gt;Step 3: Specify the container to install vim into&lt;/h3&gt; &lt;p&gt;I only have one container running in my pod, so oc picks the first container in the pod automatically:&lt;/p&gt; &lt;pre&gt;$ export POD=yourPodName&lt;/pre&gt; &lt;h3&gt;Step 4: Copy files needed to run vim&lt;/h3&gt; &lt;p&gt;For vim to start properly, copy this list of files. If vim doesn&amp;#8217;t start, add files to this list and copy them over:&lt;/p&gt; &lt;pre&gt;$ export VIM_DEPS="~/Downloads/vim /lib64/libgpm.so.2.1.0 /lib64/libpython3.8.so.1.0 /lib64/libgpm.so.2"&lt;/pre&gt; &lt;pre&gt;$ for i in $VIM_DEPS; do oc cp $i $POD:/home/worker; done&lt;/pre&gt; &lt;h3&gt;Step 5: Log into the pod&lt;/h3&gt; &lt;p&gt;To login to pod, run this command:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ oc rsh $POD&lt;/code&gt;&lt;/p&gt; &lt;h3&gt;Step 6: Run vim&lt;/h3&gt; &lt;p&gt;To run vim, enter the following:&lt;/p&gt; &lt;pre&gt;worker@pod$ LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/worker" PATH="$PATH:$PWD" vim&lt;/pre&gt; &lt;h3&gt;What if my operating system differs from the container&amp;#8217;s base image?&lt;/h3&gt; &lt;p style="text-align: left;"&gt;Make sure the architecture of your container image and laptop match. Then fire up a base image that can run locally in a container. Install vim in that container that runs on your localhost. Copy out the vim binary as is; for example, using &lt;code&gt;podman cp&lt;/code&gt; or &lt;code&gt;docker cp&lt;/code&gt;, and copy it to the pod as previously described. Run vim in the pod and observe what files are missing. These files can be taken from the container running on your localhost.&lt;/p&gt; &lt;p&gt;I hope that this quick tip vim helps when you need to reproduce and slightly modify a file in an OpenShift production container.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#38;linkname=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F19%2Fuse-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps%2F&amp;#038;title=Use%20vim%20in%20a%20production%20Red%20Hat%20OpenShift%20container%20in%206%20easy%20steps" data-a2a-url="https://developers.redhat.com/blog/2021/01/19/use-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps/" data-a2a-title="Use vim in a production Red Hat OpenShift container in 6 easy steps"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/19/use-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps/"&gt;Use vim in a production Red Hat OpenShift container in 6 easy steps&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/USaqb-inbjk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Disclaimer: In most cases, we don&amp;#8217;t recommend editing files in a container. However, in rare cases, you might need to reproduce and slightly modify a file in a production container, especially when debugging. (In this case, the vim method I&amp;#8217;m using works on Fedora 32 on my laptop and it is the base of my [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/19/use-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps/"&gt;Use vim in a production Red Hat OpenShift container in 6 easy steps&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/19/use-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">806727</post-id><dc:creator>Konrad Kleine</dc:creator><dc:date>2021-01-19T08:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/19/use-vim-in-a-production-red-hat-openshift-container-in-6-easy-steps/</feedburner:origLink></entry><entry><title type="html">Keycloak 12.0.2 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NitRTLxDU2Y/keycloak-1202-released.html" /><author><name /></author><id>https://www.keycloak.org//2021/01/keycloak-1202-released.html</id><updated>2021-01-19T00:00:00Z</updated><content type="html">To download the release go to . ALL RESOLVED ISSUES The full list of resolved issues are available in UPGRADING Before you upgrade remember to backup your database and check the for anything that may have changed.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NitRTLxDU2Y" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://www.keycloak.org//2021/01/keycloak-1202-released.html</feedburner:origLink></entry><entry><title>Operator integration testing for Operator Lifecycle Manager</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JGPT-p5D_pY/" /><category term="Linux" /><category term="Mac" /><category term="Operator" /><category term="Red Hat CodeReady Containers" /><category term="Red Hat OpenShift Container Platform" /><author><name>Taneem Ibrahim</name></author><id>https://developers.redhat.com/blog/?p=784997</id><updated>2021-01-18T08:00:54Z</updated><published>2021-01-18T08:00:54Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operators&lt;/a&gt; are one of the ways to package, deploy, and manage application distribution on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. After a developer creates an Operator, the next step is to get the Operator published on &lt;a target="_blank" rel="nofollow" href="https://operatorhub.io/"&gt;OperatorHub.io&lt;/a&gt;. Doing this allows users to install and deploy the Operator in their OpenShift clusters. The Operator is installed, updated, and the management lifecycle is handled by the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/understanding_olm/olm-understanding-olm.html"&gt;Operator Lifecycle Manager (OLM)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, we explore the steps required to test OLM integration for the Operator. For demonstration, we use a simple Operator that prints a test message to the shell. The Operator is packaged in the recently introduced &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/olm-packaging-format.html#olm-bundle-format_olm-packaging-format"&gt;Bundle Format&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-784997"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;For our local development environment, we need access to the following toolkits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;Red Hat CodeReady Containers (CRC)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://podman.io/"&gt;Podman&lt;/a&gt;, or a Docker daemon process running on the local machine&lt;/li&gt; &lt;li&gt;Operator SDK toolkit, v1.0.0 or higher (optional)&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/operator-framework/operator-registry/releases/tag/v1.13.8"&gt;Operator Package Manager (OPM)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;OpenShift Container Platform, cluster version 4.5 or higher&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We need CRC because it providesÂ convenient single-node minimal OpenShift clusters that are primarily intended to aid developers in testing. The OPM providesÂ our local desktop environment.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: After downloading OPM, we rename the &lt;code&gt;opm&lt;/code&gt; binary for ease of use by setting the binary&amp;#8217;s permission to at least make it readable and executable.&lt;/p&gt; &lt;p&gt;Once you have everything set up, create a free account on &lt;a target="_blank" rel="nofollow" href="https://quay.io/"&gt;Red Hat Quay.io&lt;/a&gt;. We use Quay to build, analyze, distribute, and host container images. In this case, take note of the &lt;code&gt;quay_username&lt;/code&gt; and set the following environment variable for ease of use:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; export quay_username=&amp;#60;your_quay_user_name&amp;#62; &amp;#62; echo $quay_username&lt;/pre&gt; &lt;p&gt;Now we are ready to get started on our OLM integration test.&lt;/p&gt; &lt;h2&gt;Step 1: Download the Operator package&lt;/h2&gt; &lt;p&gt;To get started, letâs clone the following Git repository. This repository contains our example Operator bundle package that we deploy to the local OperatorHub instance in our cluster.&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62;Â  git clone https://github.com/taneem-ibrahim/olm-testing-bundle-format-index.git&lt;/pre&gt; &lt;p&gt;This creates the following directory structure:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;foo-operator % tree âââ bundle â Â  âââ manifests â Â  â Â  âââ example.com_foobars.yaml â Â  â Â  âââ foobar-operator-metrics-reader_rbac.authorization.k8s.io_v1beta1_clusterrole.yaml â Â  â Â  âââ foobar-operator.clusterserviceversion.yaml â Â  âââ metadata â Â  â Â  âââ annotations.yaml â Â  âââ tests â Â  Â  Â  âââ scorecard â Â  Â  Â  Â  Â  âââ config.yaml âââ bundle.Dockerfile âââ catalogsource.yaml âââ subscription.yaml&lt;/pre&gt; &lt;h2&gt;&lt;b&gt;Step 2: Build and push the Operator bundle image&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Our next step is to build the Operator bundle image and publish it to a container registry. In our examples, we use Quay to host our container images. From the Operator&amp;#8217;s root directory, &lt;code&gt;foobar-operator&lt;/code&gt;, letâs run the following commands. Substitute the &lt;code&gt;&amp;#60;quay_username&amp;#62;&lt;/code&gt; tag for your own &lt;code&gt;quay_username&lt;/code&gt;.&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When you use Podman, you can run the following commands just by replacing the word Docker with Podman. For example:&lt;/p&gt;&lt;/blockquote&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; docker login quay.io -u $quay_username &amp;#62; docker build -f bundle.Dockerfile -t quay.io/$quay_username/foobar-operator:v0.0.1 . &amp;#62; docker push quay.io/$quay_username/foobar-operator:v0.0.1&lt;/pre&gt; &lt;p&gt;When we create a new repository in Quay by default, the repository visibility is set to private. For simplicity, we log into the Quay web portal and see the &lt;a target="_blank" rel="nofollow" href="https://docs.quay.io/guides/repo-view.html"&gt;repository access&lt;/a&gt; to the public. This can be set from the repository&amp;#8217;s Settings tab or by going to &lt;code&gt;https://quay.io/repository/&lt;/code&gt;. Then substitute the &lt;code&gt;quay_username&lt;/code&gt; or repository name accordingly.&lt;/p&gt; &lt;p&gt;When we prefer to keep the repository visibility private, we can add an &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/openshift_images/managing_images/using-image-pull-secrets.html#images-update-global-pull-secret_using-image-pull-secrets"&gt;image pull secret&lt;/a&gt;. Operator pods use the default &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/authentication/using-service-accounts-in-applications.html"&gt;service account&lt;/a&gt; in the &lt;code&gt;openshift-marketplace&lt;/code&gt; namespace.&lt;/p&gt; &lt;p&gt;This Operator is a simple image that loops and prints the following message &lt;code&gt;v0.0.1&lt;/code&gt; to the console:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;spec: .... Â Â Â Â Â Â Â Â Â Â Â Â Â Â containers: Â Â Â Â Â Â Â Â Â Â Â Â Â Â - &lt;b&gt;command: [ "/bin/sh", "-c", "while true ; do echo v0.0.1; sleep 10; done;" ]&lt;/b&gt; Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â image: docker.io/busybox&lt;/pre&gt; &lt;h2&gt;&lt;b&gt;Step 3: Validate the Operator bundle package (optional)&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;This is an optional step. Letâs validate the Operator bundle package we just built and pushed. The following command needs to end with the message: &lt;code&gt;all validation tests have completed successfully&lt;/code&gt;&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; operator-sdk bundle validate quay.io/$quay_username/foobar-operator:v0.0.1&lt;/pre&gt; &lt;h2&gt;&lt;b&gt;Step 4: Build and push an index image&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Once the Operator bundle image is pushed, the next step is to create and publish an index image, making the Operator available using the OLM for users to install in their clusters. &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/olm-managing-custom-catalogs.html#olm-creating-index-image_olm-managing-custom-catalogs"&gt;Index image&lt;/a&gt; is a database of pointers to Operator manifest content, which enables OLM to query the Operator image versions and get the desired Operator version installed on the cluster.&lt;/p&gt; &lt;p&gt;We use the OPM tool to create the index image for our &lt;code&gt;foobar-operator&lt;/code&gt; bundle. After building the image, we push the image to Quay. When we use Podman, we do not need to add &lt;code&gt;--build-tool docker&lt;/code&gt; because &lt;code&gt;opm&lt;/code&gt; defaults to Podman for the build tool:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; opm index add --bundles quay.io/$quay_username/foobar-operator:v0.0.1 --tag quay.io/$quay_username/foobar-operator-index:latest --build-tool docker &amp;#62; docker push quay.io/$quay_username/foobar-operator-index:latest&lt;/pre&gt; &lt;p&gt;As before, we need to set the repository visibility of &lt;code&gt;foobar-operator&lt;/code&gt; index to public for simplicity on Quay.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Step 5: Create a custom CatalogSource object&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/olm-managing-custom-catalogs.html#olm-creating-catalog-from-index_olm-managing-custom-catalogs"&gt;CatalogSource&lt;/a&gt; represents Operator metadata that OLM can query to discover and install Operators and their dependencies. We create the following CatalogSource resource. Donât forget to substitute the appropriate &lt;code&gt;quay_username&lt;/code&gt; according to the &lt;code&gt;$quay_username&lt;/code&gt; for the index image location on Quay. Save the file as &lt;code&gt;catalogsource.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;spec: Â Â sourceType: grpc Â Â image: quay.io/&lt;b&gt;&amp;#60;substitute_quay_username&amp;#62;&lt;/b&gt;/foobar-operator-index:latest Â Â displayName: Custom Catalog Â Â updateStrategy: Â Â Â Â registryPoll:Â  Â Â Â Â Â Â interval: 5m&lt;/pre&gt; &lt;p&gt;Letâs create the catalog source object:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; oc create -f catalogsource.yaml&lt;/pre&gt; &lt;p&gt;We are using the &lt;code&gt;openshift-marketplace&lt;/code&gt; namespace above since it is a global namespace. This means a subscription created in any namespace is able to resolve in the cluster. However, we can choose any custom namespace here as long as it matches the related subscription object namespace created in the next step.&lt;/p&gt; &lt;p&gt;Additionally, the name of the CatalogSource object determines which catalog registry the Operator shows up under on the OperatorHub console. In the example above, we are using &lt;code&gt;custom&lt;/code&gt; with the display name set to CustomCatalog. We also configured the catalog to automatically poll for the latest version of the index image for the Operator every five minutes.&lt;/p&gt; &lt;p&gt;We can validate the deployment of the pod by querying the pod logs:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; oc get pods -n openshift-marketplace | grep âcustomâ &amp;#62; oc logs custom-&amp;#60;pod_id&amp;#62; -n openshift-marketplace &amp;#62; â¦ level=info msg="serving registry" database=/database/index.db port=50051&lt;/pre&gt; &lt;h2&gt;&lt;b&gt;Step 6: Create a subscription object&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;A &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/understanding_olm/olm-understanding-olm.html#olm-subscription_olm-understanding-olm"&gt;subscription&lt;/a&gt; is a custom resource that describes the channel the Operator subscribes to, and whether the Operator needs to be updated manually or automatically. We are installing the Operator in the alpha channel since our bundle manifest channel is set to &lt;code&gt;alpha&lt;/code&gt; in the annotations.yaml file. The other available channel is &lt;code&gt;stable&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We can validate the channel by running the following command:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; oc get packagemanifests foobar-operator -o jsonpath='{.status.defaultChannel}' &amp;#62; alpha&lt;/pre&gt; &lt;p&gt;The GitHub repository has a subscription.yaml file provided. From the &lt;code&gt;foobar-operator&lt;/code&gt; root directory, we can run the following command to create the subscription object:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; oc create -f subscription.yaml&lt;/pre&gt; &lt;h2&gt;&lt;b&gt;Step 7: Install the Operator from the OperatorHub&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Letâs log into the OpenShift admin console, navigate to the OperatorHub, and search for our Operator, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_785017" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/step-8.png"&gt;&lt;img aria-describedby="caption-attachment-785017" class="wp-image-785017 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/step-8-1024x269.png" alt="Operators -&amp;#62; OperatorHub -&amp;#62; Searching All Items for &amp;#34;foo&amp;#34; returns &amp;#34;foobar&amp;#34;" width="640" height="168" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/step-8-1024x269.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/step-8-300x79.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/step-8-768x202.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/step-8.png 1600w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-785017" class="wp-caption-text"&gt;Figure 1. Use the OperatorHub to search and locate our Operator.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now we can install this Operator as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_785027" style="width: 242px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/step8-1.png"&gt;&lt;img aria-describedby="caption-attachment-785027" class="wp-image-785027 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/step8-1-232x300.png" alt="foobar install section set to Capability Level Basic Install" width="232" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/step8-1-232x300.png 232w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/step8-1.png 628w" sizes="(max-width: 232px) 100vw, 232px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-785027" class="wp-caption-text"&gt;Figure 2. Click Install and select openshift-marketplace namespace.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We can also query the Operator pod logs to see if itâs printing &lt;code&gt;v0.0.1&lt;/code&gt; as we had in our deployment container spec for the Operator image:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; oc logs -f foobar-operator-controller-manager-&amp;#60;pod_id&amp;#62; -n openshift-marketplace &amp;#62; v0.0.1&lt;/pre&gt; &lt;p&gt;Thatâs it. We successfully validated our Operator integration with OLM.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Upgrade the Operator version&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Now we do a simple Operator upgrade test just by updating the Operator version tag from &lt;code&gt;0.0.1&lt;/code&gt; to &lt;code&gt;0.0.2&lt;/code&gt; in the CatalogService Version (CSV) file. Letâs run the following command from the root directory of our &lt;code&gt;foobar-operator&lt;/code&gt;:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; sed 's/0.0.1/0.0.2/g' ./bundle/manifests/foobar-operator.clusterserviceversion.yaml &amp;#62; ./bundle/manifests/foobar-operator.clusterserviceversion.yaml&lt;/pre&gt; &lt;p&gt;Next, we repeat Steps 1 and 2 above to build and optionally validate the new Operator bundle image, and substitute the image version tags to be &lt;code&gt;0.0.2&lt;/code&gt; instead of &lt;code&gt;0.0.1&lt;/code&gt; in the Docker push commands respectively.&lt;/p&gt; &lt;p&gt;We are now ready to add the new Operator version to the registry. We can do that by using the &lt;code&gt;opm add&lt;/code&gt; command. Notice how we are adding the upgraded Operator version cumulatively by inserting the &lt;code&gt;from-index&lt;/code&gt; parameter. If using Podman, then we do not have to pass the &lt;code&gt;--build-tool docker&lt;/code&gt; option since &lt;code&gt;opm&lt;/code&gt; defaults to Podman build tool:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; opm index add --bundles quay.io/$quay_username/foobar-operator:v0.0.2 --from-index quay.io/$quay_username/foobar-operator-index:latest --tag quay.io/$quay_username/foobar-operator-index:latest --build-tool docker&lt;/pre&gt; &lt;p&gt;In the Quay repository, we can validate the latest versions of the Operator image and index image by running the Docker images (or Podman images) command as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_785037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-1.png"&gt;&lt;img aria-describedby="caption-attachment-785037" class="wp-image-785037 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-1-1024x54.png" alt="opm index add output showing two repositories, foobar-operator-index (set to latest) and foobar-operator (set to v0.0.2)" width="640" height="34" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-1-1024x54.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-1-300x16.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-1-768x40.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-1.png 1600w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-785037" class="wp-caption-text"&gt;Figure 3. Validate the latest Operator images and index images using the Docker (or Podman) images command.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We push this new version of the index image to Quay:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; docker push quay.io/$quay_username/foobar-operator-index:latest&lt;/pre&gt; &lt;p&gt;The CatalogSource automatically polls for the latest version every five minutes. After five minutes have passed, we can go to the OperatorHub console and validate the Operator version 0.0.2 is available as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_785047" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-2.png"&gt;&lt;img aria-describedby="caption-attachment-785047" class="wp-image-785047 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-2-300x233.png" alt="The foobar Operator section showing version 0.0.2" width="300" height="233" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-2-300x233.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/upgrade-2.png 628w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-785047" class="wp-caption-text"&gt;Figure 4. Verify the OperatorHub console and validate that the available Operator version is 0.0.2.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Letâs install the new Operator version in the &lt;code&gt;openshift-marketplace&lt;/code&gt; namespace and validate the Operator pod log to see if &lt;code&gt;v0.0.2&lt;/code&gt; is being echoed:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;&amp;#62; oc logs -f foobar-operator-controller-manager-&amp;#60;pod_id&amp;#62; -n openshift-marketplace v0.0.2&lt;/pre&gt; &lt;p&gt;Now that you know how to test OLM integration for an Operator, give it a try with your own projects!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#38;linkname=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F18%2Foperator-integration-testing-for-operator-lifecycle-manager%2F&amp;#038;title=Operator%20integration%20testing%20for%20Operator%20Lifecycle%20Manager" data-a2a-url="https://developers.redhat.com/blog/2021/01/18/operator-integration-testing-for-operator-lifecycle-manager/" data-a2a-title="Operator integration testing for Operator Lifecycle Manager"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/18/operator-integration-testing-for-operator-lifecycle-manager/"&gt;Operator integration testing for Operator Lifecycle Manager&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JGPT-p5D_pY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Operators are one of the ways to package, deploy, and manage application distribution on Red Hat OpenShift. After a developer creates an Operator, the next step is to get the Operator published on OperatorHub.io. Doing this allows users to install and deploy the Operator in their OpenShift clusters. The Operator is installed, updated, and the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/18/operator-integration-testing-for-operator-lifecycle-manager/"&gt;Operator integration testing for Operator Lifecycle Manager&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/18/operator-integration-testing-for-operator-lifecycle-manager/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">784997</post-id><dc:creator>Taneem Ibrahim</dc:creator><dc:date>2021-01-18T08:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/18/operator-integration-testing-for-operator-lifecycle-manager/</feedburner:origLink></entry><entry><title type="html">RESTEasy WADL module deployment on Wildfly</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Fgl-FcGx-QQ/" /><author><name /></author><id>https://resteasy.github.io/2021/01/18/deploy-resteasy-wadl-to-wildfly/</id><updated>2021-01-18T00:00:00Z</updated><dc:creator /><summary type="html">&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Fgl-FcGx-QQ" height="1" width="1" alt=""/&gt;</summary><feedburner:origLink>https://resteasy.github.io/2021/01/18/deploy-resteasy-wadl-to-wildfly/</feedburner:origLink></entry><entry><title>Coming in glibc 2.33: Reloadable nsswitch.conf</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/icXSyt_kNkE/" /><category term="C" /><category term="Linux" /><category term="glibc" /><category term="nsswitch" /><category term="nsswitch.conf" /><category term="reload config" /><author><name>DJ Delorie</name></author><id>https://developers.redhat.com/blog/?p=835617</id><updated>2021-01-15T08:00:59Z</updated><published>2021-01-15T08:00:59Z</published><content type="html">&lt;p&gt;In my &lt;a href="https://developers.redhat.com/blog/2018/11/26/etc-nsswitch-conf-non-complexity/"&gt;previous article about nsswitch.conf&lt;/a&gt; I talked about how simple, perhaps too simple, this config file is to use. What I didn&amp;#8217;t cover then was how simplistic its internal implementation is. Specifically, an application only loads this file onceâthe first time it&amp;#8217;s needed.&lt;/p&gt; &lt;p&gt;So, what do you do when &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Name_Service_Switch"&gt;nsswitch.conf&lt;/a&gt; needs to change? How do you update all of the running applications? You donât! The only way to force a reload is to stop the application and restart it. That is not always an option, especially for critical applications that might take a long time to restart.&lt;/p&gt; &lt;p&gt;Recent work behind the scenes in the GNU C library will change all of this. As of &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt; version 2.33, this config file now reloads and reparses each time it changes, and only the configuration is reloaded. If the configuration calls for an external shared library to be loaded, that object is only ever loaded once. It may be called in a different sequence, or not called at all, but it is never unloaded. This behavior avoids a whole class of problems related to unloading shared objects that might still be in use.&lt;/p&gt; &lt;p&gt;Most applications will never know any of this is happening. They do their lookups and get the data they need, even if itâs different than the last time. Applications that cache their lookups will never know anything changed. The catch is that if an application caches some of its lookups, but not others, it might receive an inconsistent set of information. Applications should already accommodate changes in the data, such as host addresses or the occasional UID update, so changing how that information is provided should not significantly change the application or increase the burden to the programmer.&lt;/p&gt; &lt;p&gt;Iâll address one concern likely to come upâmemory. To avoid unrestrained growth in long-running programs, the parser maintains a pool of the pre-parsed lines itâs seen, and an array of the services it provides. It only needs to link the existing bits of data together. However, this practice assumes that the overall number of action permutations is limited. Most systems cycle between a few lines, so the size of this pool is limited, as shown in Figure 1. The data for each shared object is also fixed once the object is loaded.&lt;/p&gt; &lt;p&gt;&lt;div id="attachment_835637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/data.png"&gt;&lt;img aria-describedby="caption-attachment-835637" class="wp-image-835637" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/data.png" alt="Change flow: passwd&amp;#62; dns files &amp;#62; libnss_dns.so + libnss_files.so + __nss_files, group &amp;#62; files, hosts &amp;#62; dns [NOTFOUND=return] files" width="640" height="253" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/data.png 764w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/data-300x119.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-835637" class="wp-caption-text"&gt;Figure 1: Create the data for each shared object that is fixed once the object is loaded.&lt;/p&gt;&lt;/div&gt;Of course, there is one key caveat. Anything that updates nsswitch.conf needs to do it as atomically as possible so that applications donât see a partial configuration and try to load it. If you are using a tool like &lt;code&gt;rsync&lt;/code&gt; to update remote machines (say, in a cluster or compute farm, or across a business unit), make sure you donât use the &lt;code&gt;--inplace&lt;/code&gt; option. You might want to use a create/copy/rename sequence so that glibc doesnât see a half-copied file.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#38;linkname=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2Fcoming-in-glibc-2-33-reloadable-nsswitch-conf%2F&amp;#038;title=Coming%20in%20glibc%202.33%3A%20Reloadable%20nsswitch.conf" data-a2a-url="https://developers.redhat.com/blog/2021/01/15/coming-in-glibc-2-33-reloadable-nsswitch-conf/" data-a2a-title="Coming in glibc 2.33: Reloadable nsswitch.conf"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/15/coming-in-glibc-2-33-reloadable-nsswitch-conf/"&gt;Coming in glibc 2.33: Reloadable nsswitch.conf&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/icXSyt_kNkE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In my previous article about nsswitch.conf I talked about how simple, perhaps too simple, this config file is to use. What I didn&amp;#8217;t cover then was how simplistic its internal implementation is. Specifically, an application only loads this file onceâthe first time it&amp;#8217;s needed. So, what do you do when nsswitch.conf needs to change? How [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/15/coming-in-glibc-2-33-reloadable-nsswitch-conf/"&gt;Coming in glibc 2.33: Reloadable nsswitch.conf&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/15/coming-in-glibc-2-33-reloadable-nsswitch-conf/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">835617</post-id><dc:creator>DJ Delorie</dc:creator><dc:date>2021-01-15T08:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/15/coming-in-glibc-2-33-reloadable-nsswitch-conf/</feedburner:origLink></entry><entry><title>10 reasons to develop Quarkus applications on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MsGdXON1s4c/" /><category term="Java" /><category term="Knative" /><category term="Kubernetes" /><category term="Quarkus" /><category term="Serverless" /><category term="MicroProfile" /><category term="openshift" /><category term="OpenTracing" /><category term="Spring framework" /><author><name>jebeck</name></author><id>https://developers.redhat.com/blog/?p=851277</id><updated>2021-01-15T08:00:20Z</updated><published>2021-01-15T08:00:20Z</published><content type="html">&lt;p&gt;Combining &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; with &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; provides an ideal environment for creating scalable, fast, and lightweight applications. Quarkus significantly increases developer productivity with tooling, pre-built integrations, application services, and more. This article presents 10 reasons why you should develop your Quarkus applications on OpenShift.&lt;/p&gt; &lt;h2&gt;Reason 1: One-step OpenShift deployment&lt;/h2&gt; &lt;p&gt;You donât have to be an OpenShift expert to deploy Quarkus applications. The Quarkus OpenShift extension automatically generates OpenShift resources, making it easy to get started. The extension provides multiple deployment options, including &lt;a target="_blank" rel="nofollow" href="https://github.com/GoogleContainerTools/jib"&gt;Jib&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/container-image#docker"&gt;Docker&lt;/a&gt;, and Source-to-Image (&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/enterprise/3.0/creating_images/s2i.html#:~:text=Source%2Dto%2DImage%20(S2I,ease%20of%20use%20for%20developers."&gt;S2i&lt;/a&gt;). It also creates a &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/applications/deployments/what-deployments-are.html"&gt;DeploymentConfig&lt;/a&gt;, which triggers an automatic redeployment whenever a change is detected in the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/rest_api/image_apis/imagestream-image-openshift-io-v1.html"&gt;ImageStream&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here is a simple example of a Quarkus deployment on OpenShift:&lt;/p&gt; &lt;pre&gt;//deploy JVM-based app on OpenShift //add OpenShift extension mvn quarkus:add-extension -Dextensions="openshift" //application.properties quarkus.s2i.base-jvm-image= quarkus.openshift.expose=true mvn clean package -Dquarkus.kubernetes.deploy=true &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/deploying-to-openshift"&gt;Deploying Quarkus on OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 2: One-step serverless function deployment&lt;/h2&gt; &lt;p&gt;Quarkus applications, especially those compiled to native code, are ideal for serverless applications due to their small size and fast boot times. The Quarkus OpenShift extension also makes it easy to deploy and scale &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/learn/topics/serverless"&gt;Knative serverless services&lt;/a&gt;. As a developer, you donât need to worry about server provisioning or maintaining the underlying infrastructure. You simply write your code and package it in a container for deployment.&lt;/p&gt; &lt;p&gt;Here is an example of a serverless function deployment:&lt;/p&gt; &lt;pre&gt;//deploy serverless knative app on OpenShift //add OpenShift extension mvn quarkus:add-extension -Dextensions="openshift" //application.propertiesquarkus.s2i.base-jvm-image= quarkus.kubernetes.deployment-target=knative mvn clean package -Dquarkus.kubernetes.deploy=true &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/deploying-to-openshift#knative-openshift-serverless"&gt;Using Knative via OpenShift Serverless&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 3: Live coding&lt;/h2&gt; &lt;p&gt;The traditional Java development workflow is a major drain on productivity. It can take minutes to complete each iteration in a cycle. The Quarkus live coding feature solves this problem. Figure 1 illustrates an example workflow when running in development mode.&lt;/p&gt; &lt;div id="attachment_852997" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-docs.google.com-2021.01.08-14_18_48.png"&gt;&lt;img aria-describedby="caption-attachment-852997" class="wp-image-852997" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-docs.google.com-2021.01.08-14_18_48.png" alt="write code + compile + deploy + refresh browser + repeat" width="640" height="84" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-docs.google.com-2021.01.08-14_18_48.png 932w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-docs.google.com-2021.01.08-14_18_48-300x39.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-docs.google.com-2021.01.08-14_18_48-768x101.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-852997" class="wp-caption-text"&gt;Figure 1: The write and refresh development cycle in Quarkus.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Here&amp;#8217;s the command to run Quarkus in development mode:&lt;/p&gt; &lt;pre&gt;mvn compile quarkus:dev &lt;/pre&gt; &lt;p&gt;Given this command, Quarkus checks to see if any application source files have changed. If they have, Quarkus transparently compiles the changed files and redeploys the application.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/vision/developer-joy#live-coding"&gt;Live coding with Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 4: Remote development and debugging&lt;/h2&gt; &lt;p&gt;You can also do live coding remotely, in development mode, in a clustered OpenShift or Kubernetes environment. Any changes you make locally will be immediately visible in the clustered environment. Remote development and debugging lets you create applications in the same environment where your applications will run. The key is building a mutable application:&lt;/p&gt; &lt;pre&gt;//application.properties quarkus.package.type=mutable-jar quarkus.live-reload.password=abc123 quarkus.kubernetes.env.vars.QUARKUS_LAUNCH_DEVMODE=true //Deploy mvn clean install -Dquarkus.kubernetes.deploy=true //Start mvnw quarkus:remote-dev -Dquarkus.live-reload.url= &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/maven-tooling#remote-development-mode"&gt;Building Quarkus applications in remote development mode&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 5: Access to OpenShift ConfigMaps and secrets&lt;/h2&gt; &lt;p&gt;Quarkus includes a &lt;code&gt;kubernetes-config&lt;/code&gt; extension that lets you use Kubernetes &lt;code&gt;ConfigMap&lt;/code&gt;s and secrets as a configuration source. You never even have to mount them into the pod running your Quarkus application. Instead, your Quarkus application reads &lt;code&gt;ConfigMap&lt;/code&gt;s and secrets directly from the Kubernetes API server using the Kubernetes client:&lt;/p&gt; &lt;pre&gt;//application.properties quarkus.kubernetes-config.enabled=true quarkus.kubernetes-config.secrets.enabled=true quarkus.kubernetes-config.config-maps= mvn clean package -Dquarkus.kubernetes.deploy=true &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/kubernetes-config"&gt;The Quarkus kubernetes-config extension&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 6: Health endpoints&lt;/h2&gt; &lt;p&gt;Quarkus uses the &lt;a target="_blank" rel="nofollow" href="https://download.eclipse.org/microprofile/microprofile-health-2.1/microprofile-health-spec.html"&gt;MicroProfile Health specification&lt;/a&gt; (via the SmallRye extension) to provide information about the application state, such as availability and status. This information is useful in cloud environments where automated processes must frequently determine whether to discard or restart an application. Most Quarkus client extensions have built-in health status enabled by default:&lt;/p&gt; &lt;pre&gt;//add Kubernetes-config extension mvn quarkus:add-extension -Dextensions="smallrye-health" //validate health extension mvnw compile quarkus:dev curl http://localhost:8080/health/live //org.acme.microprofile.health.SimpleHealthCheck class package org.acme.microprofile.health; import org.eclipse.microprofile.health.HealthCheck; import org.eclipse.microprofile.health.HealthCheckResponse; import org.eclipse.microprofile.health.Liveness; import javax.enterprise.context.ApplicationScoped; @Liveness @ApplicationScoped public class SimpleHealthCheck implements HealthCheck { @Override public HealthCheckResponse call() { return HealthCheckResponse.up("Simple health check"); } } &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/microprofile-health"&gt;Using the MicroProfile Health specification in Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 7: Application metrics support&lt;/h2&gt; &lt;p&gt;Quarkus uses the Micrometer extension to support capturing runtime and application metrics. These metrics provide insight into what is happening inside the application. You can also format Micrometer extension metrics for processing with tools like &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://grafana.com/"&gt;Grafana&lt;/a&gt;, which support analysis and visualization:&lt;/p&gt; &lt;pre&gt;//add Kubernetes-config extension mvn quarkus:add-extension -Dextensions="micrometer" //validate health extension mvnw compile quarkus:dev //Code snippet to discover, count, store, and record prime numbers @Path("/") public class PrimeNumberResource { private final LongAccumulator highestPrime = new LongAccumulator(Long::max, 0); private final MeterRegistry registry; PrimeNumberResource(MeterRegistry registry) { this.registry = registry; // Create a gauge to obtain the highest observed prime number registry.gauge("prime.number.max", this,PrimeNumberResource::highestObservedPrimeNumber);} // Return the highest observed prime value long highestObservedPrimeNumber() { return highestPrime.get();} } &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/micrometer#support-for-the-microprofile-metrics-api"&gt;The MicroProfile Metrics API in Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 8: Tracing support&lt;/h2&gt; &lt;p&gt;Quarkus uses the &lt;a target="_blank" rel="nofollow" href="https://download.eclipse.org/microprofile/microprofile-3.3/microprofile-spec-3.3.html#mp-opentracing"&gt;MicroProfile OpenTracing&lt;/a&gt; specification (via the SmallRye extension) to provide distributed tracing across services for interactive web applications. The SmallRye extension includes the default &lt;a target="_blank" rel="nofollow" href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; tracer to monitor and troubleshoot transactions in a distributed system:&lt;/p&gt; &lt;pre&gt;//add Kubernetes-config extension mvn quarkus:add-extension -Dextensions="smallrye-opentracing" //validate health extension mvnw compile quarkus:dev //REST endpoints are automatically traced. Here's how to trace additional methods import javax.enterprise.context.ApplicationScoped; import org.eclipse.microprofile.opentracing.Traced; @Traced @ApplicationScoped public class FrancophoneService { public String bonjour() { return "bonjour";} } &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/opentracing"&gt;Using OpenTracing in Quarkus applications&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Reason 9: Developer tooling&lt;/h2&gt; &lt;p&gt;You might come for the performance, but you&amp;#8217;ll stay for the developer productivity. Developer tooling makes it even easier to develop and deploy Quarkus applications on OpenShift. Here are a few examples:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;IDE support&lt;/b&gt;: Quarkus utilizes the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/quarkus-ls"&gt;Quarkus Language Server&lt;/a&gt; to support your favorite IDE, including &lt;a href="https://developers.redhat.com/blog/category/vs-code/"&gt;VSCode&lt;/a&gt;, Eclipse, IntelliJ, and &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/march-of-ides/"&gt;more&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Build tools&lt;/b&gt;: Quarkus also supports &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/maven-tooling"&gt;Maven&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/gradle-tooling"&gt;Gradle&lt;/a&gt; build tools.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Codestarts&lt;/b&gt;: Extension &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/extension-codestarts-a-new-way-to-learn-and-discover-quarkus/"&gt;codestarts&lt;/a&gt; include code examples and documentation to make it easier for developers new to Quarkus to create applications.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Reason 10: Compatibility with Spring APIs&lt;/h2&gt; &lt;p&gt;Spring is a dominant Java framework for developers, but Spring applications were not designed for cloud-native environments like OpenShift. Quarkus, on the other hand, was created and optimized for the cloud. As a result, Quarkus can &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/mi-quarkus-lab-validation-idc-analyst-paper"&gt;reduce cloud-resource efficiency by up to 64%&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you need cloud-native efficiency but prefer to stick with the framework you know, Quarkus provides a Spring-compatibility layer. This means you can create applications using the Spring APIs you are familiar with, including data, web, config, security, dependency injection, and more. Here&amp;#8217;s an example of Spring web development in Quarkus:&lt;/p&gt; &lt;pre&gt;//Spring Web example import java.util.List; import org.springframework.web.bind.annotation.*; @RestController @RequestMapping("/person") public class PersonController { @GetMapping(path = "/greet/{id}", produces = "text/plain") public String greetPerson(@PathVariable(name = "id") long id) { String name=""; return name; } @GetMapping(produces = "application/json") public Iterable findAll() { return personRepository.findAll(); } &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Learn more&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/quarkus-for-spring-developers/"&gt;Quarkus for Spring developers&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Get started with Quarkus&lt;/h2&gt; &lt;p&gt;I hope the availability of developer tooling, pre-built integrations, and application services inspires you to develop your first Quarkus application on OpenShift. These additional resources will help you get started:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Interactive tutorials&lt;/b&gt;: The Quarkus homepage includes numerous &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/developing-with-quarkus/"&gt;interactive tutorials&lt;/a&gt; that walk you through building Quarkus applications in a pre-configured OpenShift environment.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Generate a Quarkus project&lt;/b&gt;: Quarkus project initializers make it easy to select extensions and generate sample applications for both the &lt;a target="_blank" rel="nofollow" href="http://code.quarkus.io"&gt;community&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://code.quarkus.redhat.com/"&gt;Red Hat&lt;/a&gt; builds of Quarkus.&lt;/li&gt; &lt;li&gt;&lt;b&gt;OpenShift access&lt;/b&gt;: Red Hat provides several options for accessing an OpenShift environment, including the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;developer sandbox&lt;/a&gt; shown in Figure 2. &lt;div id="attachment_853397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-console-openshift-console.apps_.sandbox.x8i5.p1.openshiftapps.com-2021.01.08-16_41_51.png"&gt;&lt;img aria-describedby="caption-attachment-853397" class="wp-image-853397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-console-openshift-console.apps_.sandbox.x8i5.p1.openshiftapps.com-2021.01.08-16_41_51-1024x574.png" alt="The sandbox include quick starts, samples, and a variety of deployment options." width="640" height="359" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-console-openshift-console.apps_.sandbox.x8i5.p1.openshiftapps.com-2021.01.08-16_41_51-1024x574.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-console-openshift-console.apps_.sandbox.x8i5.p1.openshiftapps.com-2021.01.08-16_41_51-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-console-openshift-console.apps_.sandbox.x8i5.p1.openshiftapps.com-2021.01.08-16_41_51-768x431.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/screenshot-console-openshift-console.apps_.sandbox.x8i5.p1.openshiftapps.com-2021.01.08-16_41_51.png 1566w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-853397" class="wp-caption-text"&gt;Figure 2: The OpenShift developer sandbox.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/try?extIdCarryOver=true&amp;#38;sc_cid=701f2000001OH74AAG"&gt;Learn more about the possibilities&lt;/a&gt; of using a Red Hat OpenShift 4 cluster on your computer, in your datacenter, and more.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#38;linkname=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F15%2F10-reasons-to-develop-quarkus-applications-on-red-hat-openshift%2F&amp;#038;title=10%20reasons%20to%20develop%20Quarkus%20applications%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2021/01/15/10-reasons-to-develop-quarkus-applications-on-red-hat-openshift/" data-a2a-title="10 reasons to develop Quarkus applications on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/15/10-reasons-to-develop-quarkus-applications-on-red-hat-openshift/"&gt;10 reasons to develop Quarkus applications on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MsGdXON1s4c" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Combining Quarkus with Red Hat OpenShift provides an ideal environment for creating scalable, fast, and lightweight applications. Quarkus significantly increases developer productivity with tooling, pre-built integrations, application services, and more. This article presents 10 reasons why you should develop your Quarkus applications on OpenShift. Reason 1: One-step OpenShift deployment You donât have to be an [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/15/10-reasons-to-develop-quarkus-applications-on-red-hat-openshift/"&gt;10 reasons to develop Quarkus applications on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/15/10-reasons-to-develop-quarkus-applications-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">851277</post-id><dc:creator>jebeck</dc:creator><dc:date>2021-01-15T08:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/15/10-reasons-to-develop-quarkus-applications-on-red-hat-openshift/</feedburner:origLink></entry><entry><title type="html">WildFly Bootable JAR 3.0 is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/T8bqIWEwfvM/" /><author><name>Jean-FranÃ§ois Denise</name></author><id>https://wildfly.org//news/2021/01/15/bootable-jar-3.0.Final-Released/</id><updated>2021-01-15T00:00:00Z</updated><content type="html">The version 3.0 of the has been released. For people who are not familiar with WildFly Bootable JAR, I strongly recommend that you read this that covers it in detail. The new features that come in this release (in particular the dev-watch goal) have already been covered when the Beta1 release. The Bootable JAR contains a new that provides details on the dev-watch goal. Since Beta1, the Bootable JAR have been evolved to use WildFly 22.0.0.Final that has just been . In this blog post I will focus on the integration with . This integration is now possible thanks to the Keycloak Galleon feature-pack that is new in . KEYCLOAK GALLEON FEATURE-PACK The provides an OIDC client adapter by the means of a Galleon layer. The keycloak-client-oidc Galleon layer brings the OIDC keycloak subsystem (and associated JBoss modules) and configures the server security. For more information on the Keycloak Galleon feature-pack usage with WildFly, you can read the in the WildFly documentation. Using the Bootable JAR Maven plugin, you can combine layers coming from multiple Galleon feature-packs. In your plugin configuration it looks like: &lt;configuration&gt; &lt;feature-packs&gt; &lt;feature-pack&gt; &lt;location&gt;wildfly@maven(org.jboss.universe:community-universe)&lt;/location&gt; &lt;/feature-pack&gt; &lt;feature-pack&gt; &lt;location&gt;org.keycloak:keycloak-adapter-galleon-pack:12.0.1&lt;/location&gt; &lt;/feature-pack&gt; &lt;/feature-packs&gt; &lt;layers&gt; &lt;layer&gt;web-server&lt;/layer&gt; &lt;layer&gt;keycloak-client-oidc&lt;/layer&gt; &lt;/layers&gt; ... &lt;/configuration&gt; You will notice that the &lt;location&gt; element is structured differently for the WildFly feature-pack and the Keycloak one. The WildFly feature-pack is accessible from the Galleon community-universe. Retrieving the WildFly feature-pack from this universe allows us to not specify any version and get the latest one. Since the Keycloak Galleon feature-pack is not registered inside an universe, you need to specify its Maven coordinates. When building a Bootable JAR, the plugin retrieves the feature-packs from Maven repositories and provisions a server based on the set of Galleon layers. You can follow the steps documented in this to secure a servlet deployed inside a Bootable JAR using Keycloak. DEVELOPING ON OPENSHIFT WITH BOOTABLE JAR We are currently working at defining dev files in order to make for a smooth and efficient development experience on OpenShift. Changes done in your local Maven project fire automatic re-build and re-deploy of your application in the remote OpenShift cluster POD. To achieve this, we are leveraging the ODO source watching capabilities to push changes onto your OpenShift POD. dev-watch goal, that is running in the POD, takes over and automatically re-build/re-deploy your application. Stay tuned! KNOWN ISSUES We have encountered an issue when using the dev-watch goal with the . You need to upgrade the plugin to 3.0.2.Final to allow for dev-watch to properly operate. The Maven command to use is: mvn wildfly-jar:dev-watch -Pbootable-jar -Dversion.wildfly-jar.maven.plugin=3.0.2.Final TO CONCLUDE If you have an interesting use-case, simple enough to be reduced to a simple example, and it is not covered by the , then feel free to one. We will be very happy to help you integrate your example in the project. Just ask! Finally we would really appreciate that you keep us posted with your feedback and new requirements (that you can log as new ), this will help evolve the WildFly Bootable JAR experience in the right direction. Thank-you! JF Denise&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/T8bqIWEwfvM" height="1" width="1" alt=""/&gt;</content><dc:creator>Jean-FranÃ§ois Denise</dc:creator><feedburner:origLink>https://wildfly.org//news/2021/01/15/bootable-jar-3.0.Final-Released/</feedburner:origLink></entry></feed>
